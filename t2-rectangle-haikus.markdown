---
title: t2: Rectangle haikus
author: Carl MÃ¤sak
created: 2013-04-25T22:50:50+02:00
---
<div class="quote"><code>sheep hide at bad rains<br>
bitterly modest slumber<br>
its star to their rains<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- generated by one of the t2 solutions</code></div>


How time flies. It's two months since I reviewed the first batch of
[p6cc](http://github.com/masak/p6cc2012#readme) solutions. I solemnly swear the
next blog post will appear sooner than that.

    ## Generate rectangle haikus

    Write a program that generates haikus. A haiku has three lines, where the first
    and last lines have five syllables each, and the middle line has seven. For the
    purpose of this exercise, each line consists only of letters and spaces.

    The haikus generated have the additional requirement that each line be of equal
    length. The length requirement should not be gamed in any way, for example by
    padding lines with spaces.

        since this one does it
        rectangle plus a haiku
        it serves as fine text

    The program should attempt to generate a new haiku each time. The haiku should
    consist of English words. If the words make sense in some kind of sentence
    structure, that's considered a big bonus. Humor and/or deeper meanings are even
    bonuser.

    If you attempt to cheat at this task, you will be defeated by people who don't.

    You're free to supply your own wordlist. How you count syllables is up to you,
    and part of the task. You won't be challenged on trivial differences in
    syllable counts.

    It's OK for the program to run for a while, but it should preferably terminate
    within a reasonable span of time.

I warmly recommend people to check out [the
solutions](https://github.com/masak/p6cc2012/tree/master/t2/review) to this one. People are all over the place, coming up with ways to generate a rectangula haiku.

Some patterns recur, though. Let's break things down into subtasks and discuss
them separately.

**Word lists**. Some contestants had their wordlists inlined in the code.
Others had it in a separate file. Some stored part-of-speec information
together with the word, or syllable count.

**Sentence structure**. Solutions are all across the spectrum, all the way from
"just spew words", via "generate something that could perhaps pass for a
sentence", all the way to "try really hard to be grammatical". In my view, being
more high-end on this bit pays off big in quality. But it also costs in code
complexity and program speed.

**Search**. This is a biggie, because it bleads through into the whole design of
the program. Some of the solutions simply brute-force it. Others generate stuff
randomly but store things in a hash table, guaranteeing that eventually some
triplet of lines will form a haiku of some length. Some algorithms do clever
things here, like turning problems around, going from "how many syllables does
this line have?" to "ok, give me a word with this many syllables". One solution
partitions the integers 5 and 7 in all possible ways, and hard-codes the
resulting table.

But the really interesting bit in all solutions is the syllable counting. This
is where the participants really differ in approach. One went with porting the
CPAN module for counting syllables. Someone else did the same, but put the
module on modules.perl6.org for everyone to use. Two contestants seem to have
come up with their own (flawed) syllable-counter. A few people evade the
syllable-counting by just storing the values along with the word lists. (Which
is fine.)

All in all, an interesting set of solutions to a fun problem. Somehow, after
reviewing all of these, I have the distinct feeling that a "best" solution
could be put together by combining the best bits of everyone's solutions. I
might just do that myself, if no-one beats me to it.

Next up: arranging wire crossings to rearrange wires!
